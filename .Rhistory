# Chunk 12
AOI.dir.prefix <- paste0("lat", tile.lrc[2], tile.ulc[2],
"_lon", tile.ulc[1], tile.lrc[1])
# Chunk 13
dest.dir.issr8 <-  file.path(base.dir.issr8,
AOI.dir.prefix)
if (!dir.exists(dest.dir.issr8)) {
dir.create(dest.dir.issr8,recursive = TRUE)
}
# Chunk 14: bbox.4326
m <- matrix(c(tile.ulc[1],tile.lrc[1],  #ulc
tile.ulc[2], tile.lrc[2]), nrow=2) #lrc
bb.ll <- st_sfc(st_multipoint(m))
st_crs(bb.ll) <- 4326   # ESPG code for WGS84 long/lat
# Chunk 15: bbox.igh
# convert to Homolosine. Note epsg=152160 is not in PROJ4 database
crs.igh <- '+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs'
(bb.igh <- st_transform(bb.ll, crs.igh))
(bb.igh <- st_coordinates(bb.igh)[,1:2])
(bb <- as.vector(t(bb.igh)))
# Chunk 16: bbox.aea
crs.aea <- "+proj=aea +lat_0=23 +lon_0=-96 +lat_1=29.5 +lat_2=45.5 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
(bb.aea <- st_transform(bb.ll, crs.aea))
# Chunk 17: get.tiles.sg
# SoilGrids250 -- only the mean prediction in this script
# Use the EPSG:4326 version
src.dir <-  paste0(base.dir.sg ,"/",
AOI.dir.prefix, "/",
voi.sg, "/mean/",
depth.list.sg[depth], "cm")
(voi.depth.name <- paste0(voi.sg, "_", depth.list.sg[depth], "cm_mean_4326"))
(file.name <- paste0(src.dir, "/", voi.depth.name, '.tif'))
if (file.exists(file.name)) {
r.sg <- terra::rast(file.name)
names(r.sg) <- "SoilGrids250"
print(r.sg)
} else { stop("No SoilGrids250 tile, stopping") }
# Chunk 18: get.tiles.gsm
# GSM
src.dir <-  paste0(base.dir.gsm ,"/", AOI.dir.prefix)
voi.depth.name <- paste0(voi.gsm, "_", depth.list.gsm[depth])
(file.name <- paste0(src.dir, "/GSM_mu_", voi.depth.name, ".tif"))
file.exists(file.name)
if (file.exists(file.name)) {
r.gsm <- terra::rast(file.name)
names(r.gsm) <- "GSMv0.5"
print(r.gsm)
}
# Chunk 19: get.tiles.psu
# SPCG100USA
src.dir <-  paste0(base.dir.psu ,"/", AOI.dir.prefix)
(file.name <- paste0(src.dir, "/", voi.psu, "_", depth.list.sg[depth], '.tif'))
if (file.exists(file.name)) {
r.psu <- terra::rast(file.name)
names(r.psu) <- "spcg100usa"
print(r.psu)
}
# Chunk 20: get.tiles.polaris
# POLARIS -- only the mean prediction in this script
(file.name <- paste0(base.dir.polaris.import, "/",
AOI.dir.prefix, "/",
voi.list.polaris[voi], "/mean/",
depth.list.polaris[depth], "/",
AOI.dir.prefix, ".tif"))
if (file.exists(file.name)) {
r.p <- terra::rast(file.name)
names(r.p) <- "polaris"
print(r.p)
}
# Chunk 21: get.tiles.landgis
# LandGIS -- only the mean prediction in this script
(file.name <- paste0(base.dir.landgis, "/",
AOI.dir.prefix, "/",
voi.list.landgis[voi], "_",
depth.list.sg[depth],
".tif"))
if (file.exists(file.name)) {
r.landgis <- terra::rast(file.name)
names(r.landgis) <- "landgis"
print(r.landgis)
}
(file.name <- paste0(base.dir.issr8, "/",
AOI.dir.prefix, "/",
voi.list.issr8[voi], "_",
depth.list.issr8[depth],
".tif"))
if (file.exists(file.name)) {
r.issr8 <- terra::rast(file.name)
names(r.issr8) <- "ISSR-800"
print(r.issr8)
}
if (file.exists(file.name)) {
r.issr8 <- terra::rast(file.name)
names(r.issr8) <- "ISSR-800"
print(r.issr8)
}
head(names(db))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.align = 'center')
knitr::opts_chunk$set(cache.extra = R.version.string)
# Chunk 2: pack
library(sf)
library(rgdal)
library(terra)
library(tidyverse)
# Chunk 3: drive
ogr.d <- ogrDrivers()
ogr.d[ix <- which(ogr.d$name=="OpenFileGDB"), ]
# Chunk 4
base.dir.gsm05 <- "/Users/rossiter/ds/GSM_USA/"
base.dir.gsm05.import <- "/Volumes/Pythagoras/ds/GSM_USA/"
# Chunk 5: find.db
gdb.name <- paste0(base.dir.gsm05.import, "GSM_34LRH_20180606094754.gdb")
file.info(gdb.name)[c("size", "mtime")]
(db.layers <- ogrListLayers(gdb.name))
# Chunk 6: read.db
if (!exists("db")) {
cat("Loading attribute database...")
system.time(db <- sf::st_read(gdb.name))
} else {
cat("Using previously-loaded attribute database.")
}
# Chunk 7: info.db
class(db)
dim(db)
names(db)[1:13]
table(db$mukind)  # some have no map unit kind!
head(db$muname)
head(db$mukey)
# Chunk 8: prop.names
ix <- grep("clay", names(db))
sort(names(db)[ix])
# Chunk 9: prop.props
ix <- grep("mu_sum_comppct_r_fix_claytotal_[r,l,h]", names(db))
names(db)[ix]
# Chunk 10: comppct
db$mu_sum_comppct_r_fix_claytotal_r[16:20]
db$mu_sum_comppct_r_fix_claytotal_l[16:20]
db$mu_sum_comppct_r_fix_claytotal_h[16:20]
# Chunk 11: voi.list
voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod")
voi.list.gsm <- c("claytotal_r_g_kg", "silttotal_r_g_kg", "sandtotal_r_g_kg",
"ph1to1h2o_r_ions_pHx10", "ecec_r_cmolc_kg", "soc_r_mr_g_gF",
"dbthirdbar_whole)")
# Chunk 12: voi
voi <- 7
voi.name <- paste0("mu_", voi.list.gsm[voi], "_")
dim(db)
head(names(db))
db.attr <- dplyr::select(db, matches(c("mukeyint", voi.name)))
names(db.attr)
dim(db.attr)
names(db.attr)
voi <- 7
voi.name <- paste0("mu_", voi.list.gsm[voi], "_")
(voi.name <- paste0("mu_", voi.list.gsm[voi], "_"))
voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod")
voi.list.gsm <- c("claytotal_r_g_kg", "silttotal_r_g_kg", "sandtotal_r_g_kg",
"ph1to1h2o_r_ions_pHx10", "ecec_r_cmolc_kg", "soc_r_mr_g_gF",
"dbthirdbar_whole")
voi <- 7
(voi.name <- paste0("mu_", voi.list.gsm[voi], "_"))
db.attr <- dplyr::select(db, matches(c("mukeyint", voi.name)))
names(db.attr)
na.val <- ifelse(is.integer(db.attr[,2]), 2^16-1,
ifelse(is.double(db.attr[,2]), min(db.attr[,2]),NA))
db.attr <- db.attr %>%
na_if(., na.val)
summary(db.attr)
depth.list.sg <- c("0-5", "5-15", "15-30", "30-60", "60-100", "100-200")
depth.list.gsm <- c("000_005", "005_015", "015_030", "030_060", "060_100", "100_200")
depth <- 4
voi.depth.name <- paste0(voi.name, depth.list.gsm[depth])
(voi.depth.name <- paste0(voi.name, depth.list.gsm[depth]))
## Lower-right corner, in integer degrees
#
tile.lrc <- c(-76, 42) # lower-right corner: central NY
#
## Tile size, in integer degrees
#
size.long <- 1; size.lat <- 1
tile.ulc <- c(tile.lrc[1]-size.long, tile.lrc[2]+size.lat) # upper-left corner
m <- matrix(c(tile.ulc[1],tile.lrc[1],  #ulc
tile.ulc[2], tile.lrc[2]  #lrc
),
nrow=2)
bb.ll <- st_sfc(st_multipoint(m))
st_crs(bb.ll) <- 4326
grid.name <- paste0(base.dir.gsm05.import, "mukeyint_SaS_3as/mukeyint_SaS_3as.tif")
file.info(grid.name)[c("size", "mtime")]
r <- rast(grid.name)
ext(r)
crs(r)
dim(r)
res(r)
res(r)*60*60
res(r)[1]*(10000/90)*1000  # at the equator
res(r)[1]*(10000/90)*1000*cos((pi/180)*30)
names(r) <- "mukeyint"
bb.vect <- as.vector(matrix(st_bbox(bb.ll), nrow=2, byrow=T))
r.crop <- terra::crop(r, bb.vect)
dim(r.crop)
length(unique(r.crop))
head(r.crop, rows=8, cols=8)
m.reclass <- data.frame(from=db.attr[,1],
to=db.attr[, match(voi.depth.name, names(db.attr))])
dim(m.reclass)
m.reclass[1:6,]
system.time(
r.attr <- classify(r.crop, m.reclass)
)
plot(r.attr)
summary(r.attr)
m.reclass <- data.frame(from=db.attr[,1],
to=db.attr[, match(voi.depth.name, names(db.attr))])
names(db.attr)
(voi.depth.name <- paste0(voi.name, depth.list.gsm[depth]))
voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod")
voi.list.gsm <- c("claytotal_r_g_kg", "silttotal_r_g_kg", "sandtotal_r_g_kg",
"ph1to1h2o_r_ions_pHx10", "ecec_r_cmolc_kg", "soc_r_mr_g_gF",
"dbthirdbar_whole_r_cm3")
voi <- 7
(voi.name <- paste0("mu_", voi.list.gsm[voi], "_"))
voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod")
voi.list.gsm <- c("claytotal_r_g_kg", "silttotal_r_g_kg", "sandtotal_r_g_kg",
"ph1to1h2o_r_ions_pHx10", "ecec_r_cmolc_kg", "soc_r_mr_g_gF",
"dbthirdbar_whole_r_g_cm3")
voi <- 7
(voi.name <- paste0("mu_", voi.list.gsm[voi], "_"))
dim(db)
head(names(db))
db.attr <- dplyr::select(db, matches(c("mukeyint", voi.name)))
names(db.attr)
dim(db.attr)
# the 2nd attribute is typical of all depths
# set the NoData values
na.val <- ifelse(is.integer(db.attr[,2]), 2^16-1,
ifelse(is.double(db.attr[,2]), min(db.attr[,2]),NA))
db.attr <- db.attr %>%
na_if(., na.val)
# summary(db.attr)
depth.list.sg <- c("0-5", "5-15", "15-30", "30-60", "60-100", "100-200")
depth.list.gsm <- c("000_005", "005_015", "015_030", "030_060", "060_100", "100_200")
depth <- 4
(voi.depth.name <- paste0(voi.name, depth.list.gsm[depth]))
m.reclass <- data.frame(from=db.attr[,1],
to=db.attr[, match(voi.depth.name, names(db.attr))])
dim(m.reclass)
m.reclass[1:6,]
system.time(
r.attr <- classify(r.crop, m.reclass)
)
plot(r.attr)
summary(r.attr)
AOI.dir.prefix <- paste0("lat", tile.lrc[2], tile.ulc[2],
"_lon", tile.ulc[1], tile.lrc[1])
dest.dir <-  paste0(base.dir.gsm05, AOI.dir.prefix)
if (!dir.exists(dest.dir)) {
dir.create(dest.dir, recursive = TRUE)
}
AOI.dir.prefix <- paste0("lat", tile.lrc[2], tile.ulc[2],
"_lon", tile.ulc[1], tile.lrc[1])
f <- terra::writeRaster(r.attr, file=paste0(dest.dir, "/GSM_",
voi.depth.name, ".tif"),
overwrite=TRUE, datatype="INT2U", options=c("TFW=YES"),
filetype="GTIFF")
print(f)
# clay, silt, sand, pH, CEC, SOC, bulk density, coarse fragments
voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod", "cfvo")
voi.list.gsm <- c("claytotal_r_g_kg", "silttotal_r_g_kg", "sandtotal_r_g_kg",
"ph1to1h2o_r_ions_pHx10", "ecec_r_cmolc_kg", "soc_r_mr_g_gF",
"dbthirdbar_whole_r_g_cm3", "gravel_r_vol_ratio_m3_m3")
voi.list.issr8 <- c("clay", "silt","sand","ph", "cec", "", "", "")
voi.list.polaris <- c("clay", "silt", "sand", "ph", "", "om", "bd", "")
voi.list.psu <- c("clay", "", "sand", "ph_h2o", "", "soc", "bd", "")
voi.list.landgis <- c("clay.wfraction_usda.3a1a1a",
"silt.wfraction_usda.3a1a1a",
"sand.wfraction_usda.3a1a1a",
"ph.h2o_usda.4c1a2a",
"",
"organic.carbon_usda.6a1c",
"bulkdens.fineearth_usda.4a1h",
"coarsefrag.vfraction_usda_3b1")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
fig.align = 'center',
fig.path = './figs/compare_sg/')
knitr::opts_chunk$set(cache.extra = R.version.string)
# Chunk 2
library(rgdal)     # R interface to GDAL
library(terra)     # for raster maps
library(sf)        # Simple Features spatial data
library(gridExtra)  # arrange multiple plots
library(knitr)      # for fancy tables
library(xtable)     # (same)
# Chunk 3
base.dir <- "/Users/rossiter/ds/"
base.dir.sg <- paste0(base.dir, "SoilGrids250")
base.dir.gsm <- paste0(base.dir, "GSM_USA")
base.dir.issr8 <- paste0(base.dir, "ISSR8")
base.dir.polaris <- paste0(base.dir, "POLARIS")
base.dir.psu <- paste0(base.dir, "SPCG100USA")
base.dir.landgis <- paste0(base.dir, "LandGIS")
# POLARIS tiles are large, they were imported to the "raw import" volume
base.dir.import <- "/Volumes/Pythagoras/ds/"
base.dir.polaris.import <- paste0(base.dir.import, "POLARIS")
# Chunk 4
# clay, silt, sand, pH, CEC, SOC, bulk density, coarse fragments
voi.list.sg <- c("clay", "silt", "sand", "phh2o", "cec", "soc", "bdod", "cfvo")
voi.list.gsm <- c("claytotal_r_g_kg", "silttotal_r_g_kg", "sandtotal_r_g_kg",
"ph1to1h2o_r_ions_pHx10", "ecec_r_cmolc_kg", "soc_r_mr_g_gF",
"dbthirdbar_lt2mm_r_g_cm3", "gravel_r_vol_ratio_m3_m3")
voi.list.issr8 <- c("clay", "silt","sand","ph", "cec", "", "", "")
voi.list.polaris <- c("clay", "silt", "sand", "ph", "", "om", "bd", "")
voi.list.psu <- c("clay", "", "sand", "ph_h2o", "", "soc", "bd", "")
voi.list.landgis <- c("clay.wfraction_usda.3a1a1a",
"silt.wfraction_usda.3a1a1a",
"sand.wfraction_usda.3a1a1a",
"ph.h2o_usda.4c1a2a",
"",
"organic.carbon_usda.6a1c",
"bulkdens.fineearth_usda.4a1h",
"coarsefrag.vfraction_usda_3b1")
# Chunk 5
voi <- 4
voi.sg <- voi.list.sg[voi]
voi.issr8 <- voi.list.issr8[voi]
voi.polaris <- voi.list.polaris[voi]
voi.psu <- voi.list.psu[voi]
voi.gsm <- voi.list.gsm[voi]
# Chunk 6
depth.list.sg <- c("0-5", "5-15", "15-30", "30-60", "60-100", "100-200")
# SPCGUSA100 predicts at points, these were averaged to GSM slices during import
# --- these have the SG names
# LandGIS predicts at points, these were averaged to GSM slices during import
# --- these have the SG names
depth.list.polaris <- gsub("-", "_", depth.list.sg)
depth.list.issr8 <- gsub("-", "", depth.list.sg)
depth.list.gsm <- c("000_005", "005_015", "015_030", "030_060", "060_100", "100_200")
# Chunk 7
depth <- 1
# Chunk 8
voi.issr8 <- paste0(voi.issr8, "_", depth.list.issr8[depth])
# Chunk 9: lrc
tile.lrc <- c(-76, 42)   # lower-right corner
tile.size <- 1
# Chunk 10: ulc
tile.ulc <- c(tile.lrc[1]-tile.size, tile.lrc[2]+tile.size) # upper-left corner
# Chunk 11
AOI.dir.prefix <- paste0("lat", tile.lrc[2], tile.ulc[2],
"_lon", tile.ulc[1], tile.lrc[1])
# Chunk 12
AOI.dir.prefix <- paste0("lat", tile.lrc[2], tile.ulc[2],
"_lon", tile.ulc[1], tile.lrc[1])
# Chunk 13
dest.dir.issr8 <-  file.path(base.dir.issr8,
AOI.dir.prefix)
if (!dir.exists(dest.dir.issr8)) {
dir.create(dest.dir.issr8,recursive = TRUE)
}
# Chunk 14: bbox.4326
m <- matrix(c(tile.ulc[1],tile.lrc[1],  #ulc
tile.ulc[2], tile.lrc[2]), nrow=2) #lrc
bb.ll <- st_sfc(st_multipoint(m))
st_crs(bb.ll) <- 4326   # ESPG code for WGS84 long/lat
# Chunk 15: bbox.igh
# convert to Homolosine. Note epsg=152160 is not in PROJ4 database
crs.igh <- '+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs'
(bb.igh <- st_transform(bb.ll, crs.igh))
(bb.igh <- st_coordinates(bb.igh)[,1:2])
(bb <- as.vector(t(bb.igh)))
# Chunk 16: bbox.aea
crs.aea <- "+proj=aea +lat_0=23 +lon_0=-96 +lat_1=29.5 +lat_2=45.5 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
(bb.aea <- st_transform(bb.ll, crs.aea))
# Chunk 17: get.tiles.sg
# SoilGrids250 -- only the mean prediction in this script
# Use the EPSG:4326 version
src.dir <-  paste0(base.dir.sg ,"/",
AOI.dir.prefix, "/",
voi.sg, "/mean/",
depth.list.sg[depth], "cm")
(voi.depth.name <- paste0(voi.sg, "_", depth.list.sg[depth], "cm_mean_4326"))
(file.name <- paste0(src.dir, "/", voi.depth.name, '.tif'))
if (file.exists(file.name)) {
r.sg <- terra::rast(file.name)
names(r.sg) <- "SoilGrids250"
print(r.sg)
} else { stop("No SoilGrids250 tile, stopping") }
# Chunk 18: get.tiles.gsm
# GSM
src.dir <-  paste0(base.dir.gsm ,"/", AOI.dir.prefix)
voi.depth.name <- paste0(voi.gsm, "_", depth.list.gsm[depth])
(file.name <- paste0(src.dir, "/GSM_mu_", voi.depth.name, ".tif"))
file.exists(file.name)
if (file.exists(file.name)) {
r.gsm <- terra::rast(file.name)
names(r.gsm) <- "GSMv0.5"
print(r.gsm)
}
# Chunk 19: get.tiles.psu
# SPCG100USA
src.dir <-  paste0(base.dir.psu ,"/", AOI.dir.prefix)
(file.name <- paste0(src.dir, "/", voi.psu, "_", depth.list.sg[depth], '.tif'))
if (file.exists(file.name)) {
r.psu <- terra::rast(file.name)
names(r.psu) <- "spcg100usa"
print(r.psu)
}
# Chunk 20: get.tiles.polaris
# POLARIS -- only the mean prediction in this script
(file.name <- paste0(base.dir.polaris.import, "/",
AOI.dir.prefix, "/",
voi.list.polaris[voi], "/mean/",
depth.list.polaris[depth], "/",
AOI.dir.prefix, ".tif"))
if (file.exists(file.name)) {
r.p <- terra::rast(file.name)
names(r.p) <- "polaris"
print(r.p)
}
# Chunk 21: get.tiles.landgis
# LandGIS -- only the mean prediction in this script
(file.name <- paste0(base.dir.landgis, "/",
AOI.dir.prefix, "/",
voi.list.landgis[voi], "_",
depth.list.sg[depth],
".tif"))
if (file.exists(file.name)) {
r.landgis <- terra::rast(file.name)
names(r.landgis) <- "landgis"
print(r.landgis)
}
# Chunk 22: get.tiles.issr8
(file.name <- paste0(base.dir.issr8, "/",
AOI.dir.prefix, "/",
voi.list.issr8[voi], "_",
depth.list.issr8[depth],
".tif"))
if (file.exists(file.name)) {
r.issr8 <- terra::rast(file.name)
names(r.issr8) <- "ISSR-800"
print(r.issr8)
}
df <- data.frame(property=voi.list.sg,
gsm=c("%%","%%","%%","pHx10","cmol(c)/kg","g/gF","Mg/m3", "m3/m3"),  # GSM
sg=c("%%","%%","%%","pHx10","mmol(c)/kg","dg/kg","cg/cm3", "cm3/dm3"),  #SG
p=c("%","%", "%","pH","", "log10(%)", "g/cm3"),  # POLARIS
spcg=c("%","%","%","pHx10", "", "%","g/cm3"),  # SPCG100USA
lgis=c("%","%","%","pHx10","","5g/Kg","10 kg/m3"),  # LandGIS
issr=c("%","%","%","pH","cmol(+)/kg","","g/cm3")  # ISSR-800
)
voi.list.sg
df <- data.frame(property=voi.list.sg,
gsm=c("%%","%%","%%","pHx10","cmol(c)/kg","g/gF","Mg/m3", "m3/m3"),  # GSM
sg=c("%%","%%","%%","pHx10","mmol(c)/kg","dg/kg","cg/cm3", "cm3/dm3"),  #SG
p=c("%","%", "%","pH","", "log10(%)", "g/cm3", ""),  # POLARIS
spcg=c("%","%","%","pHx10", "", "%","g/cm3", ""),  # SPCG100USA
lgis=c("%","%","%","pHx10","","5g/Kg","10 kg/m3", "%"),  # LandGIS
issr=c("%","%","%","pH","cmol(+)/kg","","g/cm3")  # ISSR-800
)
knitr::kable(
df, caption = 'Properties and units of measure',
col.names=c("Property", "GlobalSoilMap","SoilGrids","POLARIS", "SPCG100USA", "LandGIS", "ISSR-800"),
booktabs = TRUE)
df <- data.frame(property=voi.list.sg,
gsm=c("%%","%%","%%","pHx10","cmol(c)/kg","g/gF","Mg/m3", "m3/m3"),  # GSM
sg=c("%%","%%","%%","pHx10","mmol(c)/kg","dg/kg","cg/cm3", "cm3/dm3"),  #SG
p=c("%","%", "%","pH","", "log10(%)", "g/cm3", ""),  # POLARIS
spcg=c("%","%","%","pHx10", "", "%","g/cm3", ""),  # SPCG100USA
lgis=c("%","%","%","pHx10","","5g/Kg","10 kg/m3", "%"),  # LandGIS
issr=c("%","%","%","pH","cmol(+)/kg","","g/cm3")  # ISSR-800
)
df <- data.frame(property=voi.list.sg,
gsm=c("%%","%%","%%","pHx10","cmol(c)/kg","g/gF","Mg/m3", "m3/m3"),  # GSM
sg=c("%%","%%","%%","pHx10","mmol(c)/kg","dg/kg","cg/cm3", "cm3/dm3"),  #SG
p=c("%","%", "%","pH","", "log10(%)", "g/cm3", ""),  # POLARIS
spcg=c("%","%","%","pHx10", "", "%","g/cm3", ""),  # SPCG100USA
lgis=c("%","%","%","pHx10","","5g/Kg","10 kg/m3", "%"),  # LandGIS
issr=c("%","%","%","pH","cmol(+)/kg","","g/cm3", "")  # ISSR-800
)
knitr::kable(
df, caption = 'Properties and units of measure',
col.names=c("Property", "GlobalSoilMap","SoilGrids","POLARIS", "SPCG100USA", "LandGIS", "ISSR-800"),
booktabs = TRUE)
voi.list.sg
df <- data.frame(property=voi.list.sg,
#"clay"  "silt"  "sand"  "phh2o" "cec"   "soc"   "bdod"  "cfvo"
gsm=c("%%","%%","%%","pHx10","cmol(c)/kg","g/gF","Mg/m3", "m3/m3"),  # GSM
sg=c("%%","%%","%%","pHx10","mmol(c)/kg","dg/kg","cg/cm3", "cm3/dm3"),  #SG
p=c("%","%", "%","pH","", "log10(%)", "g/cm3", ""),  # POLARIS
spcg=c("%","%","%","pHx10", "", "%","g/cm3", ""),  # SPCG100USA
lgis=c("%","%","%","pHx10","","5g/Kg","10 kg/m3", "%"),  # LandGIS
issr=c("%","%","%","pH","cmol(+)/kg","","g/cm3", "%")  # ISSR-800
)
knitr::kable(
df, caption = 'Properties and units of measure',
col.names=c("Property", "GlobalSoilMap","SoilGrids","POLARIS", "SPCG100USA", "LandGIS", "ISSR-800"),
booktabs = TRUE)
conversions <- data.frame(property=voi.list.sg,
# sg=c("%%","%%","%%","pHx10","mmol(c)/kg","dg/kg","cg/cm3", "cm3/dm3"), #SG
gsm=c(1, 1, 1, 1 , 10, 0.01, 0.01, 0.1),  # GSM
p=c(10,  10, 10,  10, NA, NA, 100, NA),  # POLARIS -- SOM is special case
spcg=c(10,  10, 10, 1, NA,  1,   100, NA),  # SPCG100USA
lgis=c(10,  10, 10, 1, NA, 20, 0.1, 0.1),  # LandGIS
issr=c(10,  10, 10,  10, 10, NA, 1, 0.1)  # ISSR-800
)
knitr::kable(
conversions, caption = 'Conversion factors, multiply by these to match SoilGrids250',
col.names=c("Property","GlobalSoilMap", "POLARIS", "SPCG100USA", "LandGIS", "ISSR-800"),
booktabs = TRUE)
